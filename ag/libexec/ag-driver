#!/usr/bin/python

"""
   Copyright 2016 The Trustees of Princeton University

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

import os
import sys
import errno 
import cStringIO
import traceback
import signal
import json
import time

import syndicate.util.gateway as gateway


if __name__ == "__main__":
  
   # it's okay if the driver doesn't have a 'serialize' or 'deserialize' method 
   default_callbacks = {
      'serialize': None,
      'deserialize': None
   }

   usage, driver_mod = gateway.driver_setup( ['read', 'crawl', 'serialize', 'deserialize'], \
                                             ['read', 'next_dataset', 'serialize', 'deserialize'],
                                             default_callbacks=default_callbacks )
  
   # ready to go!
   # tell the parent that we're ready 
   print "0"
   sys.stdout.flush()

   if usage == "read":
      
      while True:
        
         # read the path and metadata from stdin, write the chunk size and chunk to stdout
         request = gateway.read_request( sys.stdin )
         if request is None:
            print >> sys.stderr, "No more requests"
            sys.exit(3)
         
         chunk_fd = cStringIO.StringIO()
         rc = 0

         print >> sys.stderr, "read %s" % gateway.request_to_storage_path(request)

         # get it 
         try:
            rc = driver_mod.read( request, chunk_fd, driver_mod.CONFIG, driver_mod.SECRETS )
         except Exception, e:
            print >> sys.stderr, "read failed"
            print >> sys.stderr, traceback.format_exc()
            sys.exit(4)
         
         chunk = chunk_fd.getvalue()
         
         # send back the data!
         print >> sys.stderr, "read status: %s" % rc
         gateway.write_int( sys.stdout, rc )

         if rc == 0:
             print >> sys.stderr, "read %s bytes" % len(chunk)
             gateway.write_chunk( sys.stdout, chunk )

         sys.stdout.flush()
         sys.stderr.flush()

   elif usage == "crawl":

       have_more = True
       finished = False
       while True:

           # feed the next dataset
           if have_more:
               try:
                   have_more = driver_mod.next_dataset( driver_mod.CONFIG, driver_mod.SECRETS )
               except Exception, e:
                   print >> sys.stderr, "next_dataset failed"
                   print >> sys.stderr, traceback.format_exc()
                   sys.stderr.flush()
                   sys.exit(4)

           if not have_more:
               if not finished:
                   # send back a "finished" stanza 
                   cmd = gateway.make_metadata_command( "finish", "directory", 0555, None, "/")
                   gateway.write_metadata_command( sys.stdout, cmd )
                   sys.stdout.flush()

                   finished = True
               else:
                   # wait to die 
                   time.sleep(1)

   else:
      
      while True:
         
         # read request, delete, write back the status code
         request = gateway.read_request( sys.stdin )
         if request is None:
            sys.exit(3)
        
         print >> sys.stderr, "delete %s" % gateway.request_to_storage_path(request)

         try:
            rc = driver_mod.delete_chunk( request, driver_mod.CONFIG, driver_mod.SECRETS )
         except Exception, e:
            print >> sys.stderr, "delete_chunk failed"
            print >> sys.stderr, traceback.format_exc()
            sys.exit(4)
         
         # return the rc 
         print >> sys.stderr, "delete status: %s" % rc
         gateway.write_int( sys.stdout, rc )
         sys.stdout.flush()
         sys.stderr.flush()
         
